})
stopCluster (cl)
cl <- makeCluster (4)
clusterExport (cl, c ('scenarios', 'metrics', 'reps'))
cor.ij <- parLapply (cl, sc[1:4], fun = function (sc.temp){
cor.j <- vector ('numeric', length = nrow (metrics))
names (cor.j) <- rownames (metrics)
for (j in rownames (metrics))
{
temp.theta <- genspe::calculate.theta (sc.temp$a.mat, method = metrics[j,"method"], beta.div.method = metrics[j,"beta.div.method"], beta.div.sqrt.D = metrics[j, "beta.div.sqrt.D"], force.subsample = metrics[j, "force.subsample"], reps = reps)
cor.j[j] <- cor (sc.temp$simul.comm$range[temp.theta$sci.name], temp.theta$theta, method = 'spearman')
}
cor.j
})
stopCluster (cl)
cor.ij
do.call (rbind.data.frame, cor.ij)
cor.ij.df <- do.call (rbind.data.frame, cor.ij)
names (cor.ij.df) <- names (cor.ij[[1]])
View(cor.ij.df)
colMeans (cor.ij.df)
sort (colMeans (cor.ij.df))
boxplot (cor.ij.df)
?simul.comm
save (cor.ij.df, file = 'cor.ij.df.r')
library(genspe)
library(genspe)
library(genspe)
library (genspe)
?calculate.theta
?simul.comm
rnorm (1, 39)
rnorm (1, 39)
rnorm (1, 39)
rnorm (1, 39)
rnorm (1, 39)
library(genspe)
sample.comm ()
sample.comm ()$a.mat
sample.comm (based.on = 'species')$a.mat
a <- c(0,1,0,1)
b <- c(1,2,3,4)
a*b
at <- as.table (a)
at
at*b
at*as.data.frame (b)
simul.comm = NULL
Np = 300
sample.x = "random"
no.ind = 100
k = 0.2
seed = NULL
pa = F
based.on = 'individuals'
if (!is.null (seed)) set.seed (seed)
if (is.null (simul.comm)) simul.comm <- simul.comm ()
sc <- simul.comm
BASED.ON <- c('individuals', 'species')
based.on <- match.arg (based.on, BASED.ON)
#Random sample intervals along gradient
if (sample.x == "random") sample.x <- trunc(sample(c(2:sc$gr.length)-1,Np, replace = T)) else
#Equal sample intervals along gradient
if (sample.x == "equal") sample.x <- trunc(seq(2,sc$gr.length-1,length=Np)) else
#Biased sample intervals along gradient
if (sample.x == 'biased') {
exp.x<-sort(rexp(Np,rate=20))
exp.sample.x<-trunc(exp.x/(max(exp.x))*(sc$gr.length-1))
while( length(unique(exp.sample.x))!=Np )
exp.sample.x[duplicated(exp.sample.x)]<-exp.sample.x[duplicated(exp.sample.x)]+1
sample.x<-rev(sc$gr.length - exp.sample.x)	#switch to other side of gradient
}
A <- simul.comm$A.all[sample.x, ]
p.mat <- A
p.mat[is.na (p.mat)] <- 0
p.mat
a.mat
a.mat <- p.mat*0 # prepared abundance matrix
draws.rand <- round(rnorm(Np,mean=no.ind,sd=1))
draws.rand
samp.out.rand <- matrix(0,nrow=Np,ncol=sc$totS)
samp.out.rand
i <- 1
samp.prob <- p.mat [i,]
samp.prob
spec.pool.size <- sum (samp.prob > 0)
spec.pool.size
no.spec <- rnorm (1, k*spec.pool.size)
no.spec
tab.samp <- table(sample(c(1:sc$totS),size=no.spec,prob=samp.prob,replace=F))
tab.samp
as.numeric(names(tab.samp))
a.mat[i,][as.numeric(names(tab.samp))]
tab.samp
samp.prob
as.numeric(names(tab.samp))
tab.samp*samp.prob[as.numeric(names(tab.samp))]
sampl.prob
samp.prob
(tab.samp*samp.prob[as.numeric(names(tab.samp))])/sum (tab.samp*samp.prob[as.numeric(names(tab.samp))])*100
sum ((tab.samp*samp.prob[as.numeric(names(tab.samp))])/sum (tab.samp*samp.prob[as.numeric(names(tab.samp))])*100)
hist ((tab.samp*samp.prob[as.numeric(names(tab.samp))])/sum (tab.samp*samp.prob[as.numeric(names(tab.samp))])*100)
(tab.samp*samp.prob[as.numeric(names(tab.samp))])
sum(tab.samp*samp.prob[as.numeric(names(tab.samp))])
?decostand
for (i in 1:Np) {
samp.prob <- p.mat [i,]
spec.pool.size <- sum (samp.prob > 0)
no.spec <- rnorm (1, k*spec.pool.size)
tab.samp <- table(sample(c(1:sc$totS),size=no.spec,prob=samp.prob,replace=F))  #tabulated vector of spp identities after choosing no of species
a.mat[i,][as.numeric(names(tab.samp))] <- tab.samp*samp.prob[as.numeric(names(tab.samp))]
}
colnames (a.mat) <- paste ('spec_', 1:dim (a.mat)[2], sep = '')
a.mat
rowSums (a.mat)
a.mat <- decostand (a.mat, method = 'total')*100
rowSums (a.mat)
?sample.comm
library(genspe)
library(genspe)
library(genspe)
sample.comm.2
sample.comm.2()
re <- sample.comm.2()
str (re)
re <- sample.comm ()
str (re)
re <- sample.comm.2()
draw.ecospace (re)
windows ()
draw.ecospace (re)
draw.ecospace (sample.comm.2 (simul.comm.2 (Nsp = 10)))
draw.ecospace (sample.comm.2 (simul.comm.2 (totS = 10)))
draw.ecospace (sample.comm.2 (simul.comm.2 (totS = 100)))
draw.ecospace (sample.comm.2 (simul.comm.2 (totS = 100, max = c(300,300))))
sample (1:4, 4, prob = c(0,0,0,0))
sample (1:4, 4, prob = c(0,0,0,1))
sample (1:4, 4, prob = c(0,0,0,4))
sample (1:4, 4, prob = c(0,0,4,4))
sample (1:4, 4, prob = c(0,4,4,4))
sample (1:4, 4, prob = c(4,4,4,4))
sample (1:4, 3, prob = c(4,4,4,4))
sample (1:4, 3, prob = c(0,4,4,4))
sample (1:4, 3, prob = c(0,4,4,4))
sample (1:4, 3, prob = c(0,4,4,4))
sample (1:4, 3, prob = c(0,4,4,4), replace = T)
sample (1:4, 3, prob = c(0,4,4,4), replace = T)
sample (1:4, 3, prob = c(0,0,4,4), replace = T)
sample (1:4, 3, prob = c(0,0,0,4), replace = T)
sample (1:4, 3, prob = c(0,0,0,4), replace = T)
sample (1:4, 3, prob = c(0,0,0,4), replace = T)
sample (1:4, 3, prob = c(0,0,0,0), replace = T)
source('C:/Users/Zeleny/Dropbox/experimenty/R libraries/genspe/R/simul.comm.2.r')
draw.ecospace (sample.comm.2 (simul.comm.2 (totS = 100, max = c(300,300))))
(sample.comm.2 (simul.comm.2 (totS = 100, max = c(300,300))))
(sample.comm.2 (simul.comm.2 (totS = 100, max = c(300,300))))$a.mat
rowSums ((sample.comm.2 (simul.comm.2 (totS = 100, max = c(300,300))))$a.mat)
rowSums ((sample.comm.2 (simul.comm.2 (totS = 1000, max = c(300,300))))$a.mat)
rowSums ((sample.comm.2 (simul.comm.2 (totS = 1000, max = c(300,300))))$p.mat)
library(genspe)
(sample.comm.2 (simul.comm.2 (totS = 100, max = c(300,300))))$a.mat
rowSums(sample.comm.2 (simul.comm.2 (totS = 100, max = c(300,300))))$a.mat
rowSums((sample.comm.2 (simul.comm.2 (totS = 100, max = c(300,300))))$a.mat)
rowSums((sample.comm.2 (simul.comm.2 (totS = 1000, max = c(300,300))))$a.mat)
rowSums((sample.comm.2 (simul.comm.2 (totS = 1000, max = c(3000,3000))))$a.mat)
rowSums((sample.comm.2 (simul.comm.2 (totS = 1000, max = c(3000,3000))), based.on = 'species')$a.mat)
rowSums(sample.comm.2 (simul.comm.2 (totS = 1000, max = c(3000,3000))), based.on = 'species')$a.mat)
rowSums(sample.comm.2 (simul.comm.2 (totS = 1000, max = c(3000,3000)), based.on = 'species')$a.mat)
rowSums(sample.comm.2 (simul.comm.2 (totS = 1000, max = c(300,300)), based.on = 'species')$a.mat)
rm (sample.comm.2)
rm (simul.comm.2)
rowSums(sample.comm.2 (simul.comm.2 (totS = 1000, max = c(300,300)), based.on = 'species')$a.mat)
rowSums(sample.comm.2 (simul.comm.2 (totS = 1000, max = c(300,300)), based.on = 'species')$a.mat)
?round
trunc (0.1)
trunc (1.1)
trunc (10.1)
trunc (-10.1)
floor(log(x, base = 8))
floor(log(8, base = 8))
floor(log(8, base = 8))
floor(log(8, base = 8))
floor(log(8, base = 8))
floor(log(8, base = 8))
as.integer (-1)
library(genspe)
rowSums(sample.comm.2 (simul.comm.2 (totS = 1000, max = c(300,300)), based.on = 'species')$a.mat)
library (ade4)
disc
?disc
data(humDNAm)
humDNAm
disc(humDNAm$samples, sqrt(humDNAm$distances), humDNAm$structures)
humDNA.dist
is.euclid(humDNA.dist$samples)
is.euclid(humDNA.dist$regions)
data(humDNAm)
humDNA.dist <- disc(humDNAm$samples, sqrt(humDNAm$distances), humDNAm$structures)
humDNA.dist
is.euclid(humDNA.dist$samples)
is.euclid(humDNA.dist$regions)
data(ecomor)
ecomor
disc (dune)
data (dune)
disc (dune)
disc (t(dune))
disc (t(as.matrix (dune)))
disc (t(as.matrix (dune)))
library (FD
)
rao
?Rao
??Rao
raoD
picante::raoD
?disc
??morisita
library (dune)
library (vegan)
data (dune)
library (weimea)
data (vltava)
vltava$spe
plot (vegdist (decostand (vltava$spe, 'pa')) ~ vegdist (vltava$spe))
plot (vegdist (decostand (vltava$spe, 'pa')), vegdist (vltava$spe))
cmdscale (vegdist (decostand (vltava$spe, 'pa')))
summary (cmdscale (vegdist (decostand (vltava$spe, 'pa'))))
cmdscale (vegdist (decostand (vltava$spe, 'pa')), eig = T)
cmdscale (vegdist (decostand (vltava$spe, 'pa')), eig = T)$eig
plot (cmdscale (vegdist (decostand (vltava$spe, 'pa')), eig = T)$eig)
sum (cmdscale (vegdist (decostand (vltava$spe, 'pa')), eig = T)$eig)
sum (cmdscale (vegdist ( (vltava$spe)), eig = T)$eig)
plot (cmdscale (vegdist ( (vltava$spe)), eig = T)$eig)
library (genspe)
example (calcualte.theta)
example (calculate.theta)
library (genspe)
?calculate.theta
example (calculate.theta)
library(theta)
library (theta)
calculate.theta
?calculate.theta
library (theta)
?simul.comm
rnorm (100, mean = 100, sd = 1)
rnorm (100, mean = 100, sd = 10)
round (rnorm (100, mean = 100, sd = 10))
hist (round (rnorm (100, mean = 100, sd = 10)))
hist (round (rnorm (100, mean = 100, sd = 100)))
hist (round (rnorm (100, mean = 100, sd = 50)))
rnorm (1, 100, sd = 1)
rnorm (1, 100, sd = 1)
rnorm (1, 100, sd = 1)
rnorm (1, 100, sd = 1)
rnorm (1, 100, sd = 1)
rnorm (1, 100, sd = 1)
rnorm (1, 100, sd = 1)
rnorm (1, 100, sd = 1)
hist (100, 100, 1)
hist (rnorm (100, 100, 1))
hist (rnorm (100, 100, 10))
hist (rnorm (100, 100, 100))
hist (rnorm (100, mean = mean, sd = sd))
mean <- 100
sd <- 1
hist (rnorm (100, mean = mean, sd = sd))
hist (rnorm (100, mean = mean, sd = sd*mean))
hist (rnorm (100, mean = mean, sd = sd*mean))
sd <- .01
hist (rnorm (100, mean = mean, sd = sd*mean))
mean <- 1000
hist (rnorm (100, mean = mean, sd = sd*mean))
?round
runif
?runif
runif (10, .1, .3)
library(theta)
library(theta)
com <- simul.comm ()
com <- simul.comm (cv.no.ind = .5)
com <- sample.comm (simul.comm (), cv.no.ind = .5)
com
decostand (com)
decorana (com)
decorana (comm)
comm$a.mat
com$a.mat
decorana (com$a.mat)
ordiplot (decorana (com$a.mat))
com <- sample.comm (simul.comm (), cv.no.ind = .01)
ordiplot (decorana (com$a.mat))
(decorana (com$a.mat))
com <- sample.comm (simul.comm (), cv.no.ind = .01)
ordiplot (decorana (com$a.mat))
com <- sample.comm (simul.comm (), cv.no.ind = .5)
ordiplot (decorana (com$a.mat))
com <- sample.comm (simul.comm (), cv.no.ind = .9)
ordiplot (decorana (com$a.mat))
com <- sample.comm (simul.comm (), cv.no.ind = .6)
ordiplot (decorana (com$a.mat))
com <- sample.comm (simul.comm (), cv.no.ind = .3)
ordiplot (decorana (com$a.mat))
com <- sample.comm (simul.comm (), cv.no.ind = .2)
ordiplot (decorana (com$a.mat))
com <- sample.comm (simul.comm (), cv.no.ind = .001)
com <- sample.comm (simul.comm (), cv.no.ind = .001)
ordiplot (decorana (com$a.mat))
com <- sample.comm (simul.comm (), cv.no.ind = .5)
ordiplot (decorana (com$a.mat))
ordiplot (metaMDS (com$a.mat))
nmds <- (metaMDS (com$a.mat))
ordiplot (nmds)
com$a.mat
rowSums (com$a.mat > 0)
no.spec <- rowSums (com$a.mat > 0)
points (nmds)
points (nmds, cex = no.spec)
points (nmds, cex = no.spec/100)
ordiplot (nmds)
points (nmds, cex = no.spec/100)
points (nmds, cex = no.spec/10)
no.spec
range (no.spec)
rainbow
?rainbow
rainbow (max (no.spec) - min (no.spec))
hist (rowSums (sample.comm (simul.comm, cv.no.ind = .01)$a.mat>0))
sample.comm (simul.comm, cv.no.ind = .01)
hist (rowSums (sample.comm (simul.comm (), cv.no.ind = .01)$a.mat>0))
hist (rowSums (sample.comm (simul.comm (), cv.no.ind = .1)$a.mat>0))
hist (rowSums (sample.comm (simul.comm (), cv.no.ind = .5)$a.mat>0))
hist (rowSums (sample.comm (simul.comm (), cv.no.ind = .8)$a.mat>0))
hist (rowSums (sample.comm (simul.comm (), cv.no.ind = .5)$a.mat>0))
hist (rowSums (sample.comm (simul.comm (), based.on = 'species')$a.mat>0))
hist (rowSums (sample.comm (simul.comm (), based.on = 'species', k = c(.2))$a.mat>0))
hist (rowSums (sample.comm (simul.comm (), based.on = 'species', k = c(.2, .5))$a.mat>0))
hist (rowSums (sample.comm (simul.comm (), based.on = 'species', k = c(.2, .5))$a.mat>0))
hist (rowSums (sample.comm (simul.comm (), based.on = 'species', k = c(.01, .5))$a.mat>0))
library (vegetarian)
?vegetarian
?d
data (dune)
d (dune)
d (dune, lev = 'beta')
d (dune, lev = 'beta', q = 0)
d (dune, lev = 'beta', q = 2)
d (dune, lev = 'beta', q = 3\)
d (dune, lev = 'beta', q = 3)
d (dune, lev = 'beta', q = 4)
q <- seq (0,10, by = .1)
D <- lapply (q, FUN = function (q) d (dune, lev = 'beta', q = q))
plot (D ~ q)
d
D
D <- unlist (lapply (q, FUN = function (q) d (dune, lev = 'beta', q = q)))
plot (D ~ q)
q <- seq (-10,10, by = .1)
D <- unlist (lapply (q, FUN = function (q) d (dune, lev = 'beta', q = q)))
plot (D ~ q)
q <- seq (-10,10, by = .1)
D <- unlist (lapply (q, FUN = function (q) d (dune, lev = 'beta', q = q)))
plot (D ~ q)
d
?decorana
?rda
?calculate.theta
?simul.comm
?calculate.theta
d (dune)
d (dune, q = 0)
sum (colSums (dune) > 0)
sum (colSums (dune) > 0)/mean (rowSums (dune > 0))
mean (rowSums (dune > 0))
dim (dune)
d (dune, lev = 'beta', q = 0)
library(theta)
?calculate.theta
sc <- sample.comm (simul.comm (totS = 100), Np= 100)
niches <- sc$simul.comm$range
additive <- calculate.theta (sc$a.mat, method = 'add')
multi <- calculate.theta (sc$a.mat, method = 'multiplicative')
norm.abundance
library(theta)
sc <- sample.comm (simul.comm (totS = 100), Np= 100)
niches <- sc$simul.comm$range
additive <- calculate.theta (sc$a.mat, method = 'add')
multi <- calculate.theta (sc$a.mat, method = 'multiplicative')
d
?vegetarian
?normalize.rows
multi <- calculate.theta (sc$a.mat, method = 'multiplicative')
library(theta)
d
mc.mat
multi <- calculate.theta (sc$a.mat, method = 'multiplicative')
library(theta)
multi\
multi
multi1 <- calculate.theta (sc$a.mat, method = 'multiplicative')
multi1 <- calculate.theta (sc$a.mat, method = 'multiplicative', q = 1)
multi2 <- calculate.theta (sc$a.mat, method = 'multiplicative', q = 2)
multi2
plot (multi0$theta)
multi0 <- calculate.theta (sc$a.mat, method = 'multiplicative')
multi1 <- calculate.theta (sc$a.mat, method = 'multiplicative', q = 1)
multi2 <- calculate.theta (sc$a.mat, method = 'multiplicative', q = 2)
plot (multi0$theta)
plot (multi0$theta ~ multi2$theta)
sc <- sample.comm (simul.comm (totS = 100), Np= 100, sample.by = 'individuals', cv.no.ind = .5)
sc <- sample.comm (simul.comm (totS = 100), Np= 100, based.on = 'individuals', cv.no.ind = .5)
sc
multi0 <- calculate.theta (sc, method = 'multi', q = 0)
multi0 <- calculate.theta (sc, method = 'multipli', q = 0)
multi0 <- calculate.theta (sc, method = 'multiplicative', q = 0)
multi0 <- calculate.theta (sc, method = 'multiplicative', q = 0)
niches <- sc$simul.comm$range
multi0 <- calculate.theta (sc$a.mat, method = 'multiplicative', q = 0)
multi1 <- calculate.theta (sc$a.mat, method = 'multiplicative', q = 1)
multi2 <- calculate.theta (sc$a.mat, method = 'multiplicative', q = 2)
panel.cor <- function(x, y, digits = 2, prefix = "", cex.cor, ...)
{
usr <- par("usr"); on.exit(par(usr))
par(usr = c(0, 1, 0, 1))
r <- abs(cor(x, y, method = 'spearman'))
txt <- format(c(r, 0.123456789), digits = digits)[1]
txt <- paste0(prefix, txt)
if(missing(cex.cor)) cex.cor <- 0.8/strwidth(txt)
text(0.5, 0.5, txt, cex = cex.cor * r)
}
pairs (cbind (niches = niches[names (niches) %in% multi0$sci.name], multi0 = multi0$theta)
pairs (cbind (niches = niches[names (niches) %in% multi0$sci.name], multi0 = multi0$theta))
pairs (cbind (niches = niches[names (niches) %in% multi0$sci.name], multi0 = multi0$theta))
pairs (cbind (niches = niches[names (niches) %in% multi0$sci.name], multi0 = multi0$theta, multi1 = multi1$theta, upper.panel = panel.cor))
pairs (cbind (niches = niches[names (niches) %in% multi0$sci.name], multi0 = multi0$theta, multi1 = multi1$theta, upper.panel = panel.cor))
pairs (cbind (niches = niches[names (niches) %in% multi0$sci.name], multi0 = multi0$theta, multi1 = multi1$theta), upper.panel = panel.cor)
pairs (cbind (niches = niches[names (niches) %in% multi0$sci.name], multi0 = multi0$theta, multi1 = multi1$theta, multi2 = multi2$theta), upper.panel = panel.cor)
rao.pa <- calculate.theta (sc$a.mat, method = 'rao', pa = T)
rao.pa <- calculate.theta (sc$a.mat, method = 'rao', pa.transf = T)
rao.pa$theta
add <- calculate.theta (sc$a.mat, method = 'add')
add.theta
add$theta
plot (add$theta ~ rao.pa$theta)
rao.pa <- calculate.theta (sc$a.mat, method = 'rao', pa.transf = T, reps= 1000)
add <- calculate.theta (sc$a.mat, method = 'add', reps = 1000)
plot (add$theta ~ rao.pa$theta)
disc
disc (sc$a.mat)
disc (as.data.frame (t(sc$a.mat)))
?disc
disc (dune)
disc (t(dune))
disc (as.data.frame (t(dune)))
disc (as.data.frame (t(dune[1:2,])))
d (dune[1:2,], lev = 'gamma', q = 2) - d (dune[1:2,], lev = 'alpha', q = 2)
d (dune[1:2,], lev = 'alpha', q = 2)
d (dune[1:2,], lev = 'alpha', q = 0)
d (dune[1:2,], lev = 'gamma', q = 2) / d (dune[1:2,], lev = 'alpha', q = 2)
d (dune[1:2,], lev = 'gamma', q = 2)
d (dune[1:2,], lev = 'alpha', q = 2)
disc
edit (disc)
install.packages ('cat')
install.packages ('cati')
library (cati)
RaoRel
?RaoRel
RaoRel (dune)
RaoRel (dune, dfunc = matrix (1, ncol = nrow (dune), nrow = nrow (dune)))
distance <- matrix (1, ncol = nrow (dune), nrow = nrow (dune))
diag (distance) <- 0
RaoRel (dune, dfunc = distance, fphyl = distance)
RaoRel (dune, dfunc = distance, dphyl = distance)
RaoRel (t(dune), dfunc = distance, dphyl = distance)
distance <- matrix (1, ncol = ncol (dune), nrow = ncol (dune))
RaoRel (t(dune), dfunc = distance, dphyl = distance)
library(theta)
library(theta)
betadiv
betadiver
?betadiver
library(theta)
?calculate.theta
citation (roxygen)
citation (Roxygen)
citation (Roxygen2)
library(theta)
library(theta)
library(theta)
library(theta)
library(theta)
library(theta)
library (cite)
library (cati)
?cati
library(theta)
library (cati)
install.packages ('roxygen2')
install.packages ('roxygen2')
library (vegan)
install.packages ('vegan')
install.packages ('RColorBrewer')
install.packages ('betapart')
install.packages ('ade4')
install.packages ('vegetarian')
install.packages ('cati')
library(theta)
library (cati)
RaoRel
?RaoRel
